// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: api.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct GeocodingApi {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct SearchResults {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var results: [GeocodingApi.Geoname] = []

    var generationtimeMs: Float = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Geoname {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: Int32 {
      get {return _storage._id}
      set {_uniqueStorage()._id = newValue}
    }

    var name: String {
      get {return _storage._name}
      set {_uniqueStorage()._name = newValue}
    }

    var latitude: Float {
      get {return _storage._latitude}
      set {_uniqueStorage()._latitude = newValue}
    }

    var longitude: Float {
      get {return _storage._longitude}
      set {_uniqueStorage()._longitude = newValue}
    }

    var ranking: Float {
      get {return _storage._ranking}
      set {_uniqueStorage()._ranking = newValue}
    }

    var elevation: Float {
      get {return _storage._elevation}
      set {_uniqueStorage()._elevation = newValue}
    }

    var featureCode: String {
      get {return _storage._featureCode}
      set {_uniqueStorage()._featureCode = newValue}
    }

    var countryCode: String {
      get {return _storage._countryCode}
      set {_uniqueStorage()._countryCode = newValue}
    }

    var countryID: Int32 {
      get {return _storage._countryID}
      set {_uniqueStorage()._countryID = newValue}
    }

    var country: String {
      get {return _storage._country}
      set {_uniqueStorage()._country = newValue}
    }

    var admin1ID: Int32 {
      get {return _storage._admin1ID}
      set {_uniqueStorage()._admin1ID = newValue}
    }

    var admin2ID: Int32 {
      get {return _storage._admin2ID}
      set {_uniqueStorage()._admin2ID = newValue}
    }

    var admin3ID: Int32 {
      get {return _storage._admin3ID}
      set {_uniqueStorage()._admin3ID = newValue}
    }

    var admin4ID: Int32 {
      get {return _storage._admin4ID}
      set {_uniqueStorage()._admin4ID = newValue}
    }

    var admin1: String {
      get {return _storage._admin1}
      set {_uniqueStorage()._admin1 = newValue}
    }

    var admin2: String {
      get {return _storage._admin2}
      set {_uniqueStorage()._admin2 = newValue}
    }

    var admin3: String {
      get {return _storage._admin3}
      set {_uniqueStorage()._admin3 = newValue}
    }

    var admin4: String {
      get {return _storage._admin4}
      set {_uniqueStorage()._admin4 = newValue}
    }

    var timezone: String {
      get {return _storage._timezone}
      set {_uniqueStorage()._timezone = newValue}
    }

    var population: UInt32 {
      get {return _storage._population}
      set {_uniqueStorage()._population = newValue}
    }

    ///map<int32, string> alternativeNames = 16;
    var postcodes: [String] {
      get {return _storage._postcodes}
      set {_uniqueStorage()._postcodes = newValue}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension GeocodingApi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GeocodingApi"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GeocodingApi, rhs: GeocodingApi) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GeocodingApi.SearchResults: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GeocodingApi.protoMessageName + ".SearchResults"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "results"),
    2: .standard(proto: "generationtime_ms"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.results) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.generationtimeMs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.results.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.results, fieldNumber: 1)
    }
    if self.generationtimeMs != 0 {
      try visitor.visitSingularFloatField(value: self.generationtimeMs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GeocodingApi.SearchResults, rhs: GeocodingApi.SearchResults) -> Bool {
    if lhs.results != rhs.results {return false}
    if lhs.generationtimeMs != rhs.generationtimeMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GeocodingApi.Geoname: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GeocodingApi.protoMessageName + ".Geoname"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    4: .same(proto: "latitude"),
    5: .same(proto: "longitude"),
    6: .same(proto: "ranking"),
    7: .same(proto: "elevation"),
    8: .standard(proto: "feature_code"),
    9: .standard(proto: "country_code"),
    18: .standard(proto: "country_id"),
    19: .same(proto: "country"),
    10: .standard(proto: "admin1_id"),
    11: .standard(proto: "admin2_id"),
    12: .standard(proto: "admin3_id"),
    13: .standard(proto: "admin4_id"),
    20: .same(proto: "admin1"),
    21: .same(proto: "admin2"),
    22: .same(proto: "admin3"),
    23: .same(proto: "admin4"),
    14: .same(proto: "timezone"),
    15: .same(proto: "population"),
    17: .same(proto: "postcodes"),
  ]

  fileprivate class _StorageClass {
    var _id: Int32 = 0
    var _name: String = String()
    var _latitude: Float = 0
    var _longitude: Float = 0
    var _ranking: Float = 0
    var _elevation: Float = 0
    var _featureCode: String = String()
    var _countryCode: String = String()
    var _countryID: Int32 = 0
    var _country: String = String()
    var _admin1ID: Int32 = 0
    var _admin2ID: Int32 = 0
    var _admin3ID: Int32 = 0
    var _admin4ID: Int32 = 0
    var _admin1: String = String()
    var _admin2: String = String()
    var _admin3: String = String()
    var _admin4: String = String()
    var _timezone: String = String()
    var _population: UInt32 = 0
    var _postcodes: [String] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _name = source._name
      _latitude = source._latitude
      _longitude = source._longitude
      _ranking = source._ranking
      _elevation = source._elevation
      _featureCode = source._featureCode
      _countryCode = source._countryCode
      _countryID = source._countryID
      _country = source._country
      _admin1ID = source._admin1ID
      _admin2ID = source._admin2ID
      _admin3ID = source._admin3ID
      _admin4ID = source._admin4ID
      _admin1 = source._admin1
      _admin2 = source._admin2
      _admin3 = source._admin3
      _admin4 = source._admin4
      _timezone = source._timezone
      _population = source._population
      _postcodes = source._postcodes
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 4: try { try decoder.decodeSingularFloatField(value: &_storage._latitude) }()
        case 5: try { try decoder.decodeSingularFloatField(value: &_storage._longitude) }()
        case 6: try { try decoder.decodeSingularFloatField(value: &_storage._ranking) }()
        case 7: try { try decoder.decodeSingularFloatField(value: &_storage._elevation) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._featureCode) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._countryCode) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._admin1ID) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._admin2ID) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._admin3ID) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._admin4ID) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._timezone) }()
        case 15: try { try decoder.decodeSingularUInt32Field(value: &_storage._population) }()
        case 17: try { try decoder.decodeRepeatedStringField(value: &_storage._postcodes) }()
        case 18: try { try decoder.decodeSingularInt32Field(value: &_storage._countryID) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._country) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._admin1) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._admin2) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._admin3) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._admin4) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt32Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if _storage._latitude != 0 {
        try visitor.visitSingularFloatField(value: _storage._latitude, fieldNumber: 4)
      }
      if _storage._longitude != 0 {
        try visitor.visitSingularFloatField(value: _storage._longitude, fieldNumber: 5)
      }
      if _storage._ranking != 0 {
        try visitor.visitSingularFloatField(value: _storage._ranking, fieldNumber: 6)
      }
      if _storage._elevation != 0 {
        try visitor.visitSingularFloatField(value: _storage._elevation, fieldNumber: 7)
      }
      if !_storage._featureCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._featureCode, fieldNumber: 8)
      }
      if !_storage._countryCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryCode, fieldNumber: 9)
      }
      if _storage._admin1ID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._admin1ID, fieldNumber: 10)
      }
      if _storage._admin2ID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._admin2ID, fieldNumber: 11)
      }
      if _storage._admin3ID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._admin3ID, fieldNumber: 12)
      }
      if _storage._admin4ID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._admin4ID, fieldNumber: 13)
      }
      if !_storage._timezone.isEmpty {
        try visitor.visitSingularStringField(value: _storage._timezone, fieldNumber: 14)
      }
      if _storage._population != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._population, fieldNumber: 15)
      }
      if !_storage._postcodes.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._postcodes, fieldNumber: 17)
      }
      if _storage._countryID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._countryID, fieldNumber: 18)
      }
      if !_storage._country.isEmpty {
        try visitor.visitSingularStringField(value: _storage._country, fieldNumber: 19)
      }
      if !_storage._admin1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._admin1, fieldNumber: 20)
      }
      if !_storage._admin2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._admin2, fieldNumber: 21)
      }
      if !_storage._admin3.isEmpty {
        try visitor.visitSingularStringField(value: _storage._admin3, fieldNumber: 22)
      }
      if !_storage._admin4.isEmpty {
        try visitor.visitSingularStringField(value: _storage._admin4, fieldNumber: 23)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GeocodingApi.Geoname, rhs: GeocodingApi.Geoname) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._latitude != rhs_storage._latitude {return false}
        if _storage._longitude != rhs_storage._longitude {return false}
        if _storage._ranking != rhs_storage._ranking {return false}
        if _storage._elevation != rhs_storage._elevation {return false}
        if _storage._featureCode != rhs_storage._featureCode {return false}
        if _storage._countryCode != rhs_storage._countryCode {return false}
        if _storage._countryID != rhs_storage._countryID {return false}
        if _storage._country != rhs_storage._country {return false}
        if _storage._admin1ID != rhs_storage._admin1ID {return false}
        if _storage._admin2ID != rhs_storage._admin2ID {return false}
        if _storage._admin3ID != rhs_storage._admin3ID {return false}
        if _storage._admin4ID != rhs_storage._admin4ID {return false}
        if _storage._admin1 != rhs_storage._admin1 {return false}
        if _storage._admin2 != rhs_storage._admin2 {return false}
        if _storage._admin3 != rhs_storage._admin3 {return false}
        if _storage._admin4 != rhs_storage._admin4 {return false}
        if _storage._timezone != rhs_storage._timezone {return false}
        if _storage._population != rhs_storage._population {return false}
        if _storage._postcodes != rhs_storage._postcodes {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
