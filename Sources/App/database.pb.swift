// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: database.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct GeocodingDatabase {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var geonames: GeocodingDatabase.Geonames {
    get {return _geonames ?? GeocodingDatabase.Geonames()}
    set {_geonames = newValue}
  }
  /// Returns true if `geonames` has been explicitly set.
  var hasGeonames: Bool {return self._geonames != nil}
  /// Clears the value of `geonames`. Subsequent reads from it will return its default value.
  mutating func clearGeonames() {self._geonames = nil}

  var index: GeocodingDatabase.SearchTree {
    get {return _index ?? GeocodingDatabase.SearchTree()}
    set {_index = newValue}
  }
  /// Returns true if `index` has been explicitly set.
  var hasIndex: Bool {return self._index != nil}
  /// Clears the value of `index`. Subsequent reads from it will return its default value.
  mutating func clearIndex() {self._index = nil}

  var languageIndex: [GeocodingDatabase.SearchTree] = []

  var geotree: GeocodingDatabase.GeoTree {
    get {return _geotree ?? GeocodingDatabase.GeoTree()}
    set {_geotree = newValue}
  }
  /// Returns true if `geotree` has been explicitly set.
  var hasGeotree: Bool {return self._geotree != nil}
  /// Clears the value of `geotree`. Subsequent reads from it will return its default value.
  mutating func clearGeotree() {self._geotree = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Geoname {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: Int32 {
      get {return _storage._id}
      set {_uniqueStorage()._id = newValue}
    }

    var name: String {
      get {return _storage._name}
      set {_uniqueStorage()._name = newValue}
    }

    var latitude: Float {
      get {return _storage._latitude}
      set {_uniqueStorage()._latitude = newValue}
    }

    var longitude: Float {
      get {return _storage._longitude}
      set {_uniqueStorage()._longitude = newValue}
    }

    var ranking: Float {
      get {return _storage._ranking}
      set {_uniqueStorage()._ranking = newValue}
    }

    var elevation: Float {
      get {return _storage._elevation}
      set {_uniqueStorage()._elevation = newValue}
    }

    var featureCode: String {
      get {return _storage._featureCode}
      set {_uniqueStorage()._featureCode = newValue}
    }

    var countryIso2: String {
      get {return _storage._countryIso2}
      set {_uniqueStorage()._countryIso2 = newValue}
    }

    var countryID: Int32 {
      get {return _storage._countryID}
      set {_uniqueStorage()._countryID = newValue}
    }

    var admin1ID: Int32 {
      get {return _storage._admin1ID}
      set {_uniqueStorage()._admin1ID = newValue}
    }

    var admin2ID: Int32 {
      get {return _storage._admin2ID}
      set {_uniqueStorage()._admin2ID = newValue}
    }

    var admin3ID: Int32 {
      get {return _storage._admin3ID}
      set {_uniqueStorage()._admin3ID = newValue}
    }

    var admin4ID: Int32 {
      get {return _storage._admin4ID}
      set {_uniqueStorage()._admin4ID = newValue}
    }

    var timezoneIndex: Int32 {
      get {return _storage._timezoneIndex}
      set {_uniqueStorage()._timezoneIndex = newValue}
    }

    var population: UInt32 {
      get {return _storage._population}
      set {_uniqueStorage()._population = newValue}
    }

    var alternativeNames: Dictionary<Int32,String> {
      get {return _storage._alternativeNames}
      set {_uniqueStorage()._alternativeNames = newValue}
    }

    var postcodes: [String] {
      get {return _storage._postcodes}
      set {_uniqueStorage()._postcodes = newValue}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Geonames {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var geonames: Dictionary<Int32,GeocodingDatabase.Geoname> = [:]

    var timezones: [String] = []

    var languages: [String] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct GeoTree {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ordered: [Int32] = []

    var values: [Float] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct SearchTree {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ids: [Int32] = []

    var branches: Dictionary<String,GeocodingDatabase.SearchTree> = [:]

    var buffer: [GeocodingDatabase.PartialName] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct PartialName {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: Int32 = 0

    var remaining: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _geonames: GeocodingDatabase.Geonames? = nil
  fileprivate var _index: GeocodingDatabase.SearchTree? = nil
  fileprivate var _geotree: GeocodingDatabase.GeoTree? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension GeocodingDatabase: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GeocodingDatabase"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "geonames"),
    2: .same(proto: "index"),
    3: .same(proto: "languageIndex"),
    4: .same(proto: "geotree"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._geonames) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._index) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.languageIndex) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._geotree) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._geonames {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._index {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.languageIndex.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.languageIndex, fieldNumber: 3)
    }
    try { if let v = self._geotree {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GeocodingDatabase, rhs: GeocodingDatabase) -> Bool {
    if lhs._geonames != rhs._geonames {return false}
    if lhs._index != rhs._index {return false}
    if lhs.languageIndex != rhs.languageIndex {return false}
    if lhs._geotree != rhs._geotree {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GeocodingDatabase.Geoname: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GeocodingDatabase.protoMessageName + ".Geoname"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    4: .same(proto: "latitude"),
    5: .same(proto: "longitude"),
    6: .same(proto: "ranking"),
    7: .same(proto: "elevation"),
    8: .standard(proto: "feature_code"),
    9: .standard(proto: "country_iso2"),
    18: .standard(proto: "country_id"),
    10: .standard(proto: "admin1_id"),
    11: .standard(proto: "admin2_id"),
    12: .standard(proto: "admin3_id"),
    13: .standard(proto: "admin4_id"),
    14: .standard(proto: "timezone_index"),
    15: .same(proto: "population"),
    16: .same(proto: "alternativeNames"),
    17: .same(proto: "postcodes"),
  ]

  fileprivate class _StorageClass {
    var _id: Int32 = 0
    var _name: String = String()
    var _latitude: Float = 0
    var _longitude: Float = 0
    var _ranking: Float = 0
    var _elevation: Float = 0
    var _featureCode: String = String()
    var _countryIso2: String = String()
    var _countryID: Int32 = 0
    var _admin1ID: Int32 = 0
    var _admin2ID: Int32 = 0
    var _admin3ID: Int32 = 0
    var _admin4ID: Int32 = 0
    var _timezoneIndex: Int32 = 0
    var _population: UInt32 = 0
    var _alternativeNames: Dictionary<Int32,String> = [:]
    var _postcodes: [String] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _name = source._name
      _latitude = source._latitude
      _longitude = source._longitude
      _ranking = source._ranking
      _elevation = source._elevation
      _featureCode = source._featureCode
      _countryIso2 = source._countryIso2
      _countryID = source._countryID
      _admin1ID = source._admin1ID
      _admin2ID = source._admin2ID
      _admin3ID = source._admin3ID
      _admin4ID = source._admin4ID
      _timezoneIndex = source._timezoneIndex
      _population = source._population
      _alternativeNames = source._alternativeNames
      _postcodes = source._postcodes
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 4: try { try decoder.decodeSingularFloatField(value: &_storage._latitude) }()
        case 5: try { try decoder.decodeSingularFloatField(value: &_storage._longitude) }()
        case 6: try { try decoder.decodeSingularFloatField(value: &_storage._ranking) }()
        case 7: try { try decoder.decodeSingularFloatField(value: &_storage._elevation) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._featureCode) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._countryIso2) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._admin1ID) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._admin2ID) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._admin3ID) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._admin4ID) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._timezoneIndex) }()
        case 15: try { try decoder.decodeSingularUInt32Field(value: &_storage._population) }()
        case 16: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufString>.self, value: &_storage._alternativeNames) }()
        case 17: try { try decoder.decodeRepeatedStringField(value: &_storage._postcodes) }()
        case 18: try { try decoder.decodeSingularInt32Field(value: &_storage._countryID) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt32Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if _storage._latitude != 0 {
        try visitor.visitSingularFloatField(value: _storage._latitude, fieldNumber: 4)
      }
      if _storage._longitude != 0 {
        try visitor.visitSingularFloatField(value: _storage._longitude, fieldNumber: 5)
      }
      if _storage._ranking != 0 {
        try visitor.visitSingularFloatField(value: _storage._ranking, fieldNumber: 6)
      }
      if _storage._elevation != 0 {
        try visitor.visitSingularFloatField(value: _storage._elevation, fieldNumber: 7)
      }
      if !_storage._featureCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._featureCode, fieldNumber: 8)
      }
      if !_storage._countryIso2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryIso2, fieldNumber: 9)
      }
      if _storage._admin1ID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._admin1ID, fieldNumber: 10)
      }
      if _storage._admin2ID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._admin2ID, fieldNumber: 11)
      }
      if _storage._admin3ID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._admin3ID, fieldNumber: 12)
      }
      if _storage._admin4ID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._admin4ID, fieldNumber: 13)
      }
      if _storage._timezoneIndex != 0 {
        try visitor.visitSingularInt32Field(value: _storage._timezoneIndex, fieldNumber: 14)
      }
      if _storage._population != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._population, fieldNumber: 15)
      }
      if !_storage._alternativeNames.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufString>.self, value: _storage._alternativeNames, fieldNumber: 16)
      }
      if !_storage._postcodes.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._postcodes, fieldNumber: 17)
      }
      if _storage._countryID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._countryID, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GeocodingDatabase.Geoname, rhs: GeocodingDatabase.Geoname) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._latitude != rhs_storage._latitude {return false}
        if _storage._longitude != rhs_storage._longitude {return false}
        if _storage._ranking != rhs_storage._ranking {return false}
        if _storage._elevation != rhs_storage._elevation {return false}
        if _storage._featureCode != rhs_storage._featureCode {return false}
        if _storage._countryIso2 != rhs_storage._countryIso2 {return false}
        if _storage._countryID != rhs_storage._countryID {return false}
        if _storage._admin1ID != rhs_storage._admin1ID {return false}
        if _storage._admin2ID != rhs_storage._admin2ID {return false}
        if _storage._admin3ID != rhs_storage._admin3ID {return false}
        if _storage._admin4ID != rhs_storage._admin4ID {return false}
        if _storage._timezoneIndex != rhs_storage._timezoneIndex {return false}
        if _storage._population != rhs_storage._population {return false}
        if _storage._alternativeNames != rhs_storage._alternativeNames {return false}
        if _storage._postcodes != rhs_storage._postcodes {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GeocodingDatabase.Geonames: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GeocodingDatabase.protoMessageName + ".Geonames"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "geonames"),
    2: .same(proto: "timezones"),
    3: .same(proto: "languages"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,GeocodingDatabase.Geoname>.self, value: &self.geonames) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.timezones) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.languages) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.geonames.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,GeocodingDatabase.Geoname>.self, value: self.geonames, fieldNumber: 1)
    }
    if !self.timezones.isEmpty {
      try visitor.visitRepeatedStringField(value: self.timezones, fieldNumber: 2)
    }
    if !self.languages.isEmpty {
      try visitor.visitRepeatedStringField(value: self.languages, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GeocodingDatabase.Geonames, rhs: GeocodingDatabase.Geonames) -> Bool {
    if lhs.geonames != rhs.geonames {return false}
    if lhs.timezones != rhs.timezones {return false}
    if lhs.languages != rhs.languages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GeocodingDatabase.GeoTree: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GeocodingDatabase.protoMessageName + ".GeoTree"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ordered"),
    2: .same(proto: "values"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt32Field(value: &self.ordered) }()
      case 2: try { try decoder.decodeRepeatedFloatField(value: &self.values) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ordered.isEmpty {
      try visitor.visitPackedInt32Field(value: self.ordered, fieldNumber: 1)
    }
    if !self.values.isEmpty {
      try visitor.visitPackedFloatField(value: self.values, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GeocodingDatabase.GeoTree, rhs: GeocodingDatabase.GeoTree) -> Bool {
    if lhs.ordered != rhs.ordered {return false}
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GeocodingDatabase.SearchTree: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GeocodingDatabase.protoMessageName + ".SearchTree"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
    2: .same(proto: "branches"),
    3: .same(proto: "buffer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt32Field(value: &self.ids) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GeocodingDatabase.SearchTree>.self, value: &self.branches) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.buffer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitPackedInt32Field(value: self.ids, fieldNumber: 1)
    }
    if !self.branches.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GeocodingDatabase.SearchTree>.self, value: self.branches, fieldNumber: 2)
    }
    if !self.buffer.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.buffer, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GeocodingDatabase.SearchTree, rhs: GeocodingDatabase.SearchTree) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.branches != rhs.branches {return false}
    if lhs.buffer != rhs.buffer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GeocodingDatabase.PartialName: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GeocodingDatabase.protoMessageName + ".PartialName"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "remaining"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.remaining) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.remaining.isEmpty {
      try visitor.visitSingularStringField(value: self.remaining, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GeocodingDatabase.PartialName, rhs: GeocodingDatabase.PartialName) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.remaining != rhs.remaining {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
